use std::str::FromStr;

use super::{DataType,Field,FieldList,Identifier,TableDefinition};

grammar;

pub TableDefinition: Result<TableDefinition, String> = {
    "table" <name:Identifier> "(" <k: IdentifierList> ")" "{" <fields:FieldList> "}" => TableDefinition::new(name, k, fields),
}

pub FieldList: FieldList = {
    <t:VectorOfFields> => FieldList::from_vec(t).unwrap(),
}

VectorOfFields: Vec<Field> = {
    <mut fl:(<Field> ";")*> <f:Field?> ";" => match f {
        None => fl,
        Some(f) => {
            fl.push(f);
            fl
        }
    }
}

pub Field: Field = {
    <t:FieldType> <i:Identifier> "=" <n:FieldNumber> => Field::Defined { number: n, name: i, data_type: t },
    "reserved" <n: FieldNumber> => Field::Reserved { number: n },
}

pub FieldNumber: u32 = <s:r"[1-9][0-9]*"> => u32::from_str(s).unwrap();

pub FieldType: DataType = {
    "int32" => DataType::int32,
    "int64" => DataType::int64,
    "uint32" => DataType::uint32,
    "uint64" => DataType::uint64,
    "sint32" => DataType::sint32,
    "sint64" => DataType::sint64,
    "Bool" => DataType::Bool,
    "fixed32" => DataType::fixed32,
    "fixed64" => DataType::fixed64,
    "sfixed32" => DataType::sfixed32,
    "sfixed64" => DataType::sfixed64,
    "float" => DataType::float,
    "double" => DataType::double,
    "bytes" => DataType::bytes,
    "string" => DataType::string,
    "uuid" => DataType::uuid,
    // XXX "message" <w:Identifier> => DataType::message { what: Box::new(<>), },
}

pub IdentifierList: Vec<Identifier> = {
    <mut v:(<Identifier> ",")*> <e:Identifier?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

pub Identifier: Identifier = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => Identifier::new(<>).unwrap(),
}
