use crate::lexer::{self, Token};
use crate::{Block, Data, Dictionary, Statement};

grammar;

pub Statements: Vec<Statement> = Statement*;

pub Statement: Statement = {
    <a:atom> "=" <d:Data> => Statement::Assignment(a.try_into().unwrap(), d),
    <b:Block> => Statement::Block(b),
    <a:atom> ":" <d:Data> "," => Statement::AtomData(a.try_into().unwrap(), d),
    <k:Data> ":" <v:Data> "," => Statement::DataData(k, v),
    <a:atom> ":" <d:Dictionary> => Statement::AtomDictionary(a.try_into().unwrap(), d),
    <k:Data> ":" <v:Dictionary> => Statement::DataDictionary(k, v),
    <a:atom> "," => Statement::Atom(a.try_into().unwrap()),
}

pub Block: Block = {
    <a:atom> <s:sqs?> <d:Dictionary> => {
        Block {
            r#type: a.try_into().unwrap(),
            label: s.map(|s| s.try_into().unwrap()),
            dict: d,
        }
    }
};

pub Dictionary: Dictionary = {
    "{" <s:Statement*> "}" => {
        Dictionary {
            items: s,
        }
    }
};

pub Data: Data = {
    <x:sqs> => x.try_into().unwrap(),
    <x:tqs> => x.try_into().unwrap(),
    <x:f64> => x.try_into().unwrap(),
    "$" <x:atom> => {
        match x {
            Token::Atom(x) => Data::Variable(x),
            _ => unreachable!(),
        }
    }
};

extern {
    type Location = lexer::Location;
    type Error = lexer::LexicalError;

    enum lexer::Token {
        "," => Token::Comma,
        "%" => Token::Percent,
        "=" => Token::Equals,
        ":" => Token::Colon,
        "$" => Token::DollarSign,
        "{" => Token::LeftBrace,
        "}" => Token::RightBrace,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        atom => Token::Atom(_),
        sqs => Token::SingleQuotedString(_),
        tqs => Token::TripleQuotedString(_),
        f64 => Token::F64(_),
        comment => Token::Comment(_),
    }
}
